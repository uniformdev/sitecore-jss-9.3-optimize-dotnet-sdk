<!-- 
    UNIFORM
    This file is a part of Uniform distribution package

    IMPORTANT! Do not modify this file because all changes will be lost during further upgrade:
    Use patch files instead: https://doc.sitecore.com/developers/90/platform-administration-and-architecture/en/use-a-patch-file-to-customize-the-sitecore-configuration.html
-->

<configuration
  xmlns:set="http://www.sitecore.net/xmlconfig/set/"
  xmlns:role="http://www.sitecore.net/xmlconfig/role/"
  xmlns:patch="http://www.sitecore.net/xmlconfig/">

  <sitecore>
    <siteManager>
        <providers>
            <add name="sitecore">
                <providers>
                    <reference name="uniform" />
                </providers>
            </add>

            <add name="uniform" type="Uniform.Sites.UniformSiteManager, Uniform.Content.Sitecore">
                <param desc="database" role:require="ContentDelivery">web</param>
                <param desc="database" role:require="ContentManagement or Standalone">master</param>
            </add>
        </providers>
    </siteManager>
      
    <pipelines>
      <initialize>
        <processor type="Uniform.Pipelines.Initialize.AsyncLicenseCheck, Uniform.Content.Sitecore"
                   patch:after="*[@type='Sitecore.Pipelines.HttpRequest.UserResolver, Sitecore.Kernel']" />

        <processor type="Uniform.Pipelines.Initialize.InitializeMvcRoutes, Uniform.Content.Sitecore"
                   patch:after="*[@type='Sitecore.Pipelines.HttpRequest.UserResolver, Sitecore.Kernel']" />

        <processor type="Uniform.Pipelines.Initialize.InitializeSiteItems, Uniform.Content.Sitecore"
                   role:require="ContentManagement or Standalone">
            <database>master</database>
        </processor>

        <processor type="Uniform.Pipelines.Initialize.SetTLSVersion, Uniform.Content.Sitecore"
                          patch:before="*[1]" />
        
      </initialize>
      <httpRequestBegin>
        <processor type="Uniform.Pipelines.HttpRequest.SaveFirstRequestUrl, Uniform.Content.Sitecore"
                   patch:before="*"/>
          
        <processor type="Uniform.Pipelines.HttpRequest.UniformContextSwitcher, Uniform.Content.Sitecore"
                   patch:before="*[@type='Sitecore.Pipelines.HttpRequest.SiteResolver, Sitecore.Kernel']" />
          
        <processor type="Uniform.Pipelines.HttpRequest.ResolveItemID, Uniform.Content.Sitecore"
                   patch:before="processor[@type='Sitecore.Mvc.Pipelines.HttpRequest.TransferRoutedRequest, Sitecore.Mvc']"/>

      </httpRequestBegin>
      <mvc.getXmlBasedLayoutDefinition>
        <processor type="Uniform.Pipelines.GetXmlBasedLayoutDefinition.FixDuplicateUniqueIds, Uniform.Content.Sitecore" />
      </mvc.getXmlBasedLayoutDefinition>
    </pipelines>

    <settings>
      <!-- UNIFORM - API TOKEN
           The setting defines the API security token for different parts of the system to authenticate.           
           This is very basic level of security, but it is never exposed to the end users. It is recommended
           to apply additional external levels of security if any part of the system is exposed to the Internet.
      -->
      <setting name="Uniform.API.Token" value="" />
      <setting name="Uniform.DisableHttpsCertificateValidation" value="false" />
      <setting name="Uniform.Data.Sitemap.GenerateTimeout" value="00:00:10" />
      <setting name="Uniform.Data.Page.GenerateTimeout" value="00:00:20" />
      <!--
        React datasources are deprecated and will be removed in future releases. Use model builders instead.

        To enable React datasources set `Uniform.Data.Page.LegacyReactDatasources.Enabled` setting to `true`.

        Default value: false
      -->
      <setting name="Uniform.Data.Page.LegacyReactDatasources.Enabled" value="false" />

      <!-- UNIFORM SERVICE COMPATIBILITY CHECK MODE
        By default, before starting a publishing Uniform checks
        if Uniform Publish Service is up and verifies it's version
        to be identical to Uniform Connector for Sitecore module
        (the Uniform.Content.Sitecore.dll assembly).
        This can be configured as one of predefined modes:
        - "Exact" halts publish if there's any version mismatch
          (halt when 2.0.200714-3 vs 2.0.200714-8)
        - "Minor" halts publish unless Major and Minor components match
          (halt when 2.1.200714-3 vs 2.0.200714-3)
        - "Major" halts publish unless Major components match
          (halt when 3.0.200714-3 vs 2.0.200714-3)
        - "None" only warns about any version mismatch

        Default value: "" (Minor)
      -->
      <setting name="Uniform.Service.CompatibilityCheckMode" value="Minor" />
        
      <setting name="Uniform.Caching.Enabled" value="true" />
    </settings>

    <uniform>
      <services>
        <siteConfigurationService ref="uniform/services/configBasedSiteConfigurationService" />
        
        <configBasedSiteConfigurationService type="Uniform.Services.SiteConfigurationService, Uniform.Content.Sitecore" singleInstance="true" />
        
        <pageNodeService type="Uniform.Services.PageNodeService, Uniform.Content.Sitecore" singleInstance="true">
          <param ref="uniform/services/renderingNodeService" desc="renderingNodeService"/>
          <param ref="uniform/services/dataSourceNodeService" desc="dataSourceNodeService"/>
          <param ref="uniform/services/expandFieldService" desc="expandFieldService"/>
          <param ref="uniform/services/expandDataNodeService" desc="expandDataNodeService"/>
          <param ref="uniform/services/pageMvcNodeService" desc="pageMvcNodeService"/>
            
          <data hint="raw:AddExtender">
            <!--
            <propertyName type="TYPE_IMPLEMENTS_IPageNodeExtender, ASSEMBLY" />
            -->
          </data>
        </pageNodeService>
        <!--
          React datasources are deprecated and will be removed in future releases. Use model builders instead.
        -->
        <dataItemNodeService type="Uniform.Services.DataItemNodeService, Uniform.Content.Sitecore" singleInstance="true">
          <param ref="uniform/services/expandFieldService" desc="expandFieldService"/>
          <param ref="uniform/services/expandDataNodeService" desc="expandDataNodeService"/>

          <expandChildrenRules hint="raw:AddExpandChildrenRule">
            <!--<LinkMenuTemplate templateId="{AC7394D5-2AA7-4FDB-A7D8-B1B87F9FA661}" type="Uniform.ExpandChildrenRules.ExpandChildByTemplate, Uniform.Content.Sitecore" />-->
          </expandChildrenRules>
        </dataItemNodeService>
        <!--
          React datasources are deprecated and will be removed in future releases. Use model builders instead.
        -->
        <dataSourceNodeService type="Uniform.Services.DataSourceNodeService, Uniform.Content.Sitecore" singleInstance="true">
          <param ref="uniform/services/renderingNodeService" desc="renderingNodeService"/>
          <param ref="uniform/services/dataItemNodeService" desc="dataItemNodeService"/>
        </dataSourceNodeService>
        <mapNodeService type="Uniform.Services.MapNodeService, Uniform.Content.Sitecore" singleInstance="true">
          <ItemsExcludedWithChildren>false</ItemsExcludedWithChildren>
          
          <excludeRules hint="raw:AddExcludeRule">
            <!-- 
              there is a possibility to include or exclude items based on root (ItemRootRule) or path (ItemPathRule)
              ItemRootRule checks if item's path starts with the provided path and includes this item and all children items. Full path required.
              ItemPathRule checks if item's path ends with the provided path and includes only this item. Relative path is acceptable.
      
              <home id="f1c51eb5-1828-4e46-8be8-09350bdcda5b" type="Uniform.ExcludeRules.ItemIdRule, Uniform.Content.Sitecore" />
              <events itemPath="/sitecore/content/sitename/home/events-list" type="Uniform.ExcludeRules.ItemRootRule, Uniform.Content.Sitecore" />
              <projects itemPath="/projects" type="Uniform.ExcludeRules.ItemPathRule, Uniform.Content.Sitecore" />             
            -->
          </excludeRules> 
          <includeRules hint="raw:AddIncludeRule">
          <!--
            <home id="f1c51eb5-1828-4e46-8be8-09350bdcda5b" type="Uniform.ExcludeRules.ItemIdRule, Uniform.Content.Sitecore" />
            <events itemPath="/sitecore/content/sitename/home/events-list" type="Uniform.ExcludeRules.ItemRootRule, Uniform.Content.Sitecore" />
            <projects itemPath="/projects" type="Uniform.ExcludeRules.ItemPathRule, Uniform.Content.Sitecore" />  
          -->
          </includeRules>
          <mapExtenders hint="raw:AddMapExtender">
          <!--
            <wildcarditems id="{EAF9636F-6198-49D9-912B-273399008EE8}" type="Yournamespace.CustomMapExtender, Custom" />
          -->
          </mapExtenders>
          <mapNodeExtenders hint="raw:AddMapNodeExtender">
          <!--
            <templateKeyAppender type="Yournamespace.CustomMapNodeBuilder, Custom" />
          -->
          </mapNodeExtenders>
        </mapNodeService>
        <renderingNodeService type="Uniform.Services.RenderingNodeService, Uniform.Content.Sitecore" singleInstance="true">
          <javaScriptRenderingOverrides hint="list:AddJavaScriptRenderingOverride">
            <!--<rendering>{RENDERING-ID}</rendering>-->
          </javaScriptRenderingOverrides>
        </renderingNodeService>
        <!-- 
          Allows to expand field value(s)
        -->
        <!--
          React datasources are deprecated and will be removed in future releases. Use model builders instead.
        -->
        <expandDataNodeService type="Uniform.Services.ExpandDataNodeService, Uniform.Content.Sitecore" singleInstance="true">
          <expanders hint="raw:AddExpander">
            <expander type="Uniform.Expanders.FieldFallbackExpander, Uniform.Content.Sitecore">
              <fields hint="raw:AddFallbackRule">
                <!--<url field="url" fallback="page" />-->
              </fields>
            </expander>
          </expanders>
        </expandDataNodeService>
        <!--
          React datasources are deprecated and will be removed in future releases. Use model builders instead.
        -->
        <expandFieldService type="Uniform.Services.ExpandFieldService, Uniform.Content.Sitecore" singleInstance="true">
          <expanders hint="raw:AddExpander">
            <expander type="Uniform.Expanders.StripSystemFields, Uniform.Content.Sitecore"/>
            <!--<expander type="Uniform.Expanders.StripAllFields, Uniform.Content.Sitecore"
              patch:instead="expander[@type='Uniform.Expanders.StripSystemFields, Uniform.Content.Sitecore']">
              <excludeItems hint="raw:AddExcludeItem">
                <item1> {66C8BCC4-0BE1-413D-B740-B11082DB744B}</item1>
              </excludeItems>
              <excludeFields hint="raw:AddExcludeField">                
                <title>{A3B8BCC4-0BE1-413D-B740-B11082DB7103} </title>
                <text> Text </text>
              </excludeFields>
            </expander>-->
            <expander type="Uniform.Expanders.InternalLinkExpander, Uniform.Content.Sitecore"/>
            <expander type="Uniform.Expanders.DateTimeExpander, Uniform.Content.Sitecore"/>
            <expander type="Uniform.Expanders.GeneralLinkExpander, Uniform.Content.Sitecore"/>
            <expander type="Uniform.Expanders.ImageExpander, Uniform.Content.Sitecore"/>
            <!--
            <expander type="Contoso.Expanders.SampleExpander, Contoso" />
            
            namespace Contoso.Expanders 
            {
              public class SampleExpander : IFieldExpander 
              {
                public void Expand(FieldInfo field) 
                {
                  // check field ID
                  if (field.ID == Guid.Parse("...")) 
                  { 
                    // expand field value or remove field from output to reduce size or enforce security
                    // 
                    // for example:                  
                    // * field.Value = null
                    //   to remove from output, or
                    //
                    // * field.Value = ((LookupField)field).TargetItem?["Name"]; 
                    //   to follow the link and use target item's Name field
                    //
                    // note, LinkManager is not supported in these APIs.
                  }
                }
              }  
            }
            -->
          </expanders>
        </expandFieldService>

        <optimizeIntegrationService type="Uniform.Services.OptimizeIntegrationService, Uniform.Content.Sitecore" singleInstance="true">
          <enableEsi>true</enableEsi>
        </optimizeIntegrationService>
      </services>
      <siteItemRefresher type="Uniform.Items.SiteItemRefresher, Uniform.Content.Sitecore" />
    </uniform>
  </sitecore>
</configuration>
