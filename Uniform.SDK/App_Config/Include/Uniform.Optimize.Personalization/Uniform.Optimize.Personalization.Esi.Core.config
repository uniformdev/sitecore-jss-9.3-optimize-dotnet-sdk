<?xml version="1.0" encoding="utf-8" ?>
<configuration
  xmlns:set="http://www.sitecore.net/xmlconfig/set/"
  xmlns:role="http://www.sitecore.net/xmlconfig/role/"
  xmlns:env="http://www.sitecore.net/xmlconfig/env/"
  xmlns:patch="http://www.sitecore.net/xmlconfig/">

  <sitecore>   
    <settings>
      <!--
        UNIFORM: ESI DEBUG ENABLED
        
        If true, the generated ESI expressions are included as 
        HTML comments in rendered pages. This is in addition
        to the ESI tags being included in rendered pages.
      -->
      <setting name="Uniform.Optimize.Personalization.Esi.DebugEnabled" value="false" />
      <!--
        UNIFORM: PERSONALIZATION TESTING DISABLED
      
        If true, personalization will be active for all visitors, regardless
        if whether they are included in an active test or not.
      -->
      <setting name="Uniform.Optimize.Personalization.Esi.TestingDisabled" value="false" />
      <!--
        UNIFORM: DO NOT CONVERT CAMPAIGN PARAMETER TO ID
      
        When reading query string parameters to determine if
        a campaign was triggered, Uniform converts the query
        string value into a guid format. If true, the query
        string parameter value is NOT formatted in this way.
      -->
      <setting name="Uniform.Optimize.Personalization.Esi.DoNotConvertCampaignParameterToId" value="false" />
      <setting name="Uniform.Optimize.Emitters.Default" value="Esi" />
      <!--
        UNIFORM: TESTING EXCLUSION MODE
        
        When a Uniform test is active, and a visitor is included
        in the test, Uniform disables personalization. By default,
        this affect personalization on all renderings on the site.
        
        In cases where you want more control over which renderings
        are affected by a test, Uniform gives you a pipeline 
        (excludeRenderingFromTest) that lets you add your own 
        logic to determine whether or not you want the test to 
        apply on a per-rendering basis.
        
        The following options are supported:
        * exclude - The excludeRenderingFromTest pipeline is used 
                    to determine which renderings are excluded from 
                    the test (meaning these renderings will always 
                    be personalized, even if the visitor is included 
                    in the test. This is the default mode.
        * include - The includeRenderingInTest pipeline is used 
                    to determine which renderings are included in 
                    the test (meaning these renderings are the only
                    renderings that will not be personalized if the 
                    visitor is included in the test.
      -->
      <setting name="Uniform.Optimize.Personalization.Esi.TestingExclusionMode" value="exclude" />

      <setting name="Uniform.Optimize.Personalization.Esi.PageSizeValidator.FatalLimitInKb" value="950" />
      <setting name="Uniform.Optimize.Personalization.Esi.PageSizeValidator.WarningLimitInKb" value="600" />
    </settings>
    
    <services>
      <configurator type="Uniform.Optimize.ServicesConfigurator, Uniform.Optimize.Personalization.Esi.Core" />
    </services>
    
    <uniform>
      <emitters>
        <members hint="raw:AddEmitter">
          <esi name="Esi" type="Uniform.Optimize.Emitters.EsiEmitter, Uniform.Optimize.Personalization.Esi.Core" resolve="true" singleInstance="true">
            <requestChecker ref="uniform/personalization/esi/defaultRequestChecker" />
            <ruleParser ref="uniform/personalization/esi/ruleParser" />
          </esi>
        </members>
      </emitters>
      <personalization>
        <esi>
          <actionsParser  type="Uniform.Optimize.Rules.RuleActionsParser, Uniform.Optimize.Personalization.Esi.Core"
                          resolve="true"
                          singleInstance="true" />
          
          <ruleParser type="Uniform.Optimize.Rules.RuleParser, Uniform.Optimize.Personalization.Esi.Core"
                      resolve="true"
                      singleInstance="true">
            <actionsParser ref="uniform/personalization/esi/actionsParser" />
            <conditions hint="list:AddConditionParser">
            </conditions>
          </ruleParser>
          
          <defaultRequestChecker ref="uniform/personalization/esi/requestCheckers/httpHeaderRequestChecker" />
          <requestCheckers>
            <alwaysOnRequestChecker type="Uniform.Optimize.RequestContext.AlwaysOnRequestChecker, Uniform.Optimize.Personalization.Esi.Core"
                                    singleInstance="true" />
            <httpHeaderRequestChecker type="Uniform.Optimize.RequestContext.HttpHeaderRequestChecker, Uniform.Optimize.Personalization.Esi.Core"
                                      singleInstance="true">
              <header>Accept-ESI</header>
              <queryParameter>uniform_esi</queryParameter>
            </httpHeaderRequestChecker>
          </requestCheckers>          
        </esi>  
      </personalization>
      <services>
        <!--
          The decision to generate ESI tags happens at runtime (e.g. HTTP header sent from the CDN).
          In other words, ESI tag generation is not known at configuration time, so the typical 
          approach (i.e. using the converters config section to specify a converter, like is done
          to support JSS) cannot be used.
          
          This service acts as a fallback. If ESI is enabled, a converter that supports ESI is used. 
          If ESI is not enabled, no converter is used.
        -->
        <esiContextNodeService type="Uniform.Optimize.Services.EsiContextNodeService, Uniform.Optimize.Personalization.Esi.Core" singleInstance="true">
          <requestChecker ref="uniform/personalization/esi/defaultRequestChecker" />
        </esiContextNodeService>
        <!--
          The decision to generate ESI tags happens at runtime (e.g. HTTP header sent from the CDN).
          In other words, ESI tag generation is not known at configuration time, so the typical 
          approach (i.e. using the converters config section to specify a converter, like is done
          to support JSS) cannot be used.
          
          This service can acts as a fallback. If ESI is enabled, a converter that 
          supports ESI is used. If ESI is not enabled, the default converter is used. 
          This is disabled by default through the property "doNotFallback".
        -->
        <personalizationNodeService patch:instead="*[@type='Uniform.Optimize.Services.PersonalizationNodeService, Uniform.Optimize.Core']"
                                    type="Uniform.Optimize.Services.EsiPersonalizationNodeService, Uniform.Optimize.Personalization.Esi.Core" singleInstance="true">
          <doNotFallback>true</doNotFallback>
          <requestChecker ref="uniform/personalization/esi/defaultRequestChecker" />
        </personalizationNodeService>
        <!--
          The decision to generate ESI tags happens at runtime (e.g. HTTP header sent from the CDN).
          In other words, ESI tag generation is not known at configuration time, so the typical 
          approach (i.e. using the converters config section to specify a converter, like is done
          to support JSS) cannot be used.
          
          This service acts as a fallback. If ESI is enabled, a converter that supports ESI is used. 
          If ESI is not enabled, the default converter is used.
        -->
        <trackingNodeService patch:instead="*[@type='Uniform.Optimize.Services.TrackingNodeService, Uniform.Optimize.Core']"
                             type="Uniform.Optimize.Services.EsiTrackingNodeService, Uniform.Optimize.Personalization.Esi.Core" singleInstance="true">
          <requestChecker ref="uniform/personalization/esi/defaultRequestChecker" />
          <enableEsi>false</enableEsi>
        </trackingNodeService>
      </services>
    </uniform>

    <pipelines>
      <mvc.getRenderer>
        <processor type="Uniform.Optimize.Pipelines.MvcGetRenderer.ResolveRenderingEsi, Uniform.Optimize.Personalization.Esi.Core"
                   patch:before="processor[@type='Sitecore.Mvc.Analytics.Pipelines.Response.GetRenderer.CustomizeRendering, Sitecore.Mvc.Analytics']|processor[@type='Sitecore.Personalization.Mvc.Pipelines.Response.GetRenderer.CustomizeRendering, Sitecore.Personalization.Mvc']"
                   resolve="true">
          <ruleParser ref="uniform/personalization/esi/ruleParser" />
          <requestChecker ref="uniform/personalization/esi/defaultRequestChecker" />
        </processor>
      </mvc.getRenderer>

      <mvc.customizeRendering>
        <processor type="Uniform.Optimize.Pipelines.MvcCustomizeRendering.PreventEsiRenderingCustomization, Uniform.Optimize.Personalization.Esi.Core"
                   patch:before="*[1]" />
      </mvc.customizeRendering>

      <group name="uniform" groupName="uniform">
        <pipelines>
          <esiGetContext>
            <processor type="Uniform.Optimize.Pipelines.EsiGetContext.SetVisitState, Uniform.Optimize.Personalization.Esi.Core" />
            <processor type="Uniform.Optimize.Pipelines.EsiGetContext.GetCampaigns, Uniform.Optimize.Personalization.Esi.Core" />
            <processor type="Uniform.Optimize.Pipelines.EsiGetContext.GetCampaignForCurrentVisit, Uniform.Optimize.Personalization.Esi.Core" />
            <processor type="Uniform.Optimize.Pipelines.EsiGetContext.GetGoals, Uniform.Optimize.Personalization.Esi.Core" />
            <processor type="Uniform.Optimize.Pipelines.EsiGetContext.GetGoalsForCurrentVisit, Uniform.Optimize.Personalization.Esi.Core" />
            <processor type="Uniform.Optimize.Pipelines.EsiGetContext.GetPersonalizationTest, Uniform.Optimize.Personalization.Esi.Core" />
            <processor type="Uniform.Optimize.Pipelines.EsiGetContext.GetProfileScores, Uniform.Optimize.Personalization.Esi.Core" />
            <!-- 
              GetPersonalizationRules must be last because its value may 
              depend on other ESI variables set by earlier processors.
            -->
            <processor type="Uniform.Optimize.Pipelines.EsiGetContext.GetPersonalizationRules, Uniform.Optimize.Personalization.Esi.Core">
              <ruleParser ref="uniform/personalization/esi/ruleParser" />
            </processor>
          </esiGetContext>
          <getTrackingContextMarkup>
            <processor type="Uniform.Optimize.Pipelines.GetTrackingContextMarkup.AddEsiContext, Uniform.Optimize.Personalization.Esi.Core" />
          </getTrackingContextMarkup>
          <getInlineTrackingMarkup>
            <processor patch:before="*[@type='Uniform.Optimize.Pipelines.GetInlineTrackingMarkup.AddTrackingObject, Uniform.Optimize.Tracking']"
                       type="Uniform.Optimize.Pipelines.GetInlineTrackingMarkup.AddEsiContext, Uniform.Optimize.Personalization.Esi.Core" />
          </getInlineTrackingMarkup>
          <!--
            PIPELINE: excludeRenderingFromTest
            
            This pipeline is used in "exclude" testing exclusion mode. In this
            mode, when a Uniform test is active, all personalization is disabled
            for a visitor who is a part of the test. This pipeline allows you to 
            introduce logic that controls whether personalization is enabled 
            (meaning the rendering is excluded from the test) on per-rendering 
            basis.
          -->
          <excludeRenderingFromTest>
            <processor type="Uniform.Optimize.Pipelines.ExcludeRenderingFromTest.CheckRenderingParameters, Uniform.Optimize.Personalization.Esi.Core">
              <parameters hint="raw:AddParameter">
                <!--
                  Parameter names are case-sensitive; values are not.
                  
                  <parameter name="uniform_exclude_from_tests" value="true" />
                -->
              </parameters>
            </processor>
            <processor type="Uniform.Optimize.Pipelines.ExcludeRenderingFromTest.CheckRenderingType, Uniform.Optimize.Personalization.Esi.Core">
              <renderings hint="list:AddRendering">
                <!-- 
                  You can specify renderings by the definition item ID or path:
                    
                  <sample-rendering-1>11111111-2222-3333-4444-555555555555</sample-rendering-1>
                  <sample-rendering-2>/sitecore/layout/Renderings/Sample/Sample Rendering</sample-rendering-2>
                -->
              </renderings>
            </processor>
          </excludeRenderingFromTest>
          <!--
            PIPELINE: includeRenderingInTest
            
            This pipeline is used in "include" testing exclusion mode. In this
            mode, when a Uniform test is active, personalization is only disabled
            for a visitor who is a part of the test if the rendering is identified 
            by this pipeline. This pipeline allows you to introduce logic that 
            controls whether personalization is disabled (meaning the rendering 
            is included from the test) on per-rendering basis.
          -->
          <includeRenderingInTest>
            <processor type="Uniform.Optimize.Pipelines.IncludeRenderingInTest.CheckRenderingParameters, Uniform.Optimize.Personalization.Esi.Core">
              <parameters hint="raw:AddParameter">
                <!--
                  Parameter names are case-sensitive; values are not.
                  
                  <parameter name="uniform_include_in_tests" value="true" />
                -->
              </parameters>
            </processor>
            <processor type="Uniform.Optimize.Pipelines.IncludeRenderingInTest.CheckRenderingType, Uniform.Optimize.Personalization.Esi.Core">
              <renderings hint="list:AddRendering">
                <!-- 
                  You can specify renderings by the definition item ID or path:
                    
                  <sample-rendering-1>11111111-2222-3333-4444-555555555555</sample-rendering-1>
                  <sample-rendering-2>/sitecore/layout/Renderings/Sample/Sample Rendering</sample-rendering-2>
                -->
              </renderings>
            </processor>
          </includeRenderingInTest>
        </pipelines>
      </group>
    </pipelines>
  </sitecore>
</configuration>
