<?xml version="1.0" encoding="utf-8" ?>
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:set="http://www.sitecore.net/xmlconfig/set/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
  <sitecore>
    <settings>
      <!--
        ESI tags cannot be written to Layout Service output for SSR.
        Renderings that represent the ESI tags needed to expose
        personalization context are placed in this placeholder.
      -->
      <setting name="Uniform.Optimize.Esi.Jss.ContextPlaceholderPath" value="/esi-context" />
      <setting name="Uniform.Optimize.Esi.Jss.ContextPlaceholderName" value="esi-context" />
      <!--
        If true, ESI context details are included in the ESI context placeholder.
      -->
      <setting name="Uniform.Optimize.Esi.Jss.Context.Debug" value="false" />
      <!--
        If custom IRenderingContentsResolvers are used, the custom 
        resolver can check for this parameter on the rendering to
        know whether to use its custom logic or if it should use
        the default resolver.
      -->
      <setting name="Uniform.Optimize.Esi.Jss.UniformRenderingParameterName" value="UNIFORM_MODE" />
    </settings>
    
    <services>
      <configurator type="Uniform.Optimize.ServicesConfigurator, Uniform.Optimize.Personalization.Esi.Jss"
                    patch:after="configurator[@type='Sitecore.LayoutService.RegisterDependencies, Sitecore.LayoutService']" />
      <!-- 
        When the ESI tags are executed, renderings may be personalized. 
        Information about this personalization (e.g. the rule that was
        matched) must be included along with the personalized content.
        
        This configurator extends the description of the rendering by 
        adding a "personalization" property.
      -->
      <configurator type="Uniform.Optimize.ViewEngine.RegisterDependencies, Uniform.Optimize.Personalization.Esi.Jss"
                    patch:after="configurator[@type='Sitecore.JavaScriptServices.ViewEngine.RegisterDependencies, Sitecore.JavaScriptServices.ViewEngine']" />
    </services>

    <uniform>
      <personalization>
        <esi>
          <jssRuleTreeRenderer type="Uniform.Optimize.RuleTree.JssRuleTreeRenderer, Uniform.Optimize.Personalization.Esi.Jss"
                               resolve="true"
                               singleInstance="true" />
          <!--
            The EsiPlaceholderRenderingService is instantiated using
            dependency injection This prevents Sitecore configuration 
            from being used to pass values to it. As a solution, the 
            service reads this object and uses it for the service's
            configuration.
            
            * csrConfigurations
            * ssrConfigurations
              Any Layout Service configuration involved with server-side
              rendering should be specified as an allowed configuration.
              
            At render time, if the Layout Service configuration is not
            included in either the csr or ssr lists, the ESI context 
            placeholder will be added to the route details, but the 
            placeholder will be empty.
          -->
          <esiPlaceholderRenderingServiceSettings type="Uniform.Optimize.ItemRendering.EsiPlaceholderRenderingServiceSettings, Uniform.Optimize.Personalization.Esi.Jss"
               resolve="true"
               singleInstance="true">
            <csrConfigurations hint="list">
              <config>jss</config>
            </csrConfigurations>
            <ssrConfigurations hint="list">
              <config>uniform-esi-ssr</config>
            </ssrConfigurations>
          </esiPlaceholderRenderingServiceSettings>
        </esi>
      </personalization>
    </uniform>

    <layoutService>
      <configurations>
        <!--
          Any Layout Service configuration that is used in an app that
          uses tracking or personalization must set the placeholder
          resolver to use the EsiDynamicPlaceholdersResolver. This 
          resolver ensures that the ESI context placeholder is added
          to the Layout Service context.
          
          Use the innerResolver property to specify the placeholder 
          resolver that should be used for all other placeholders.
        -->
        <config name="jss">
          <rendering type="Sitecore.LayoutService.Configuration.DefaultRenderingConfiguration, Sitecore.LayoutService">
            <placeholdersResolver type="Uniform.Optimize.Placeholders.EsiDynamicPlaceholdersResolver, Uniform.Optimize.Personalization.Esi.Jss">
              <innerResolver type="Sitecore.LayoutService.Placeholders.DynamicPlaceholdersResolver, Sitecore.LayoutService" />
              <requestChecker ref="uniform/personalization/esi/defaultRequestChecker" />
            </placeholdersResolver>
          </rendering>
          <serialization type="Sitecore.JavaScriptServices.ViewEngine.LayoutService.SerializationConfiguration, Sitecore.JavaScriptServices.ViewEngine">
            <transformer type="Uniform.Optimize.ViewEngine.LayoutService.Serialization.EsiLayoutTransformer, Uniform.Optimize.Personalization.Esi.Jss" resolve="true">
              <fallback type="Sitecore.JavaScriptServices.ViewEngine.LayoutService.Serialization.LayoutTransformer, Sitecore.JavaScriptServices.ViewEngine" resolve="true" />
            </transformer>
          </serialization>
        </config>
        <config name="uniform-esi-ssr">
          <rendering type="Sitecore.LayoutService.Configuration.DefaultRenderingConfiguration, Sitecore.LayoutService">
            <placeholdersResolver type="Uniform.Optimize.Placeholders.EsiDynamicPlaceholdersResolver, Uniform.Optimize.Personalization.Esi.Jss">
              <innerResolver type="Sitecore.LayoutService.Placeholders.DynamicPlaceholdersResolver, Sitecore.LayoutService" />
              <requestChecker ref="uniform/personalization/esi/defaultRequestChecker" />
            </placeholdersResolver>
            <itemSerializer type="Sitecore.JavaScriptServices.ViewEngine.LayoutService.JssItemSerializer, Sitecore.JavaScriptServices.ViewEngine" resolve="true">
              <AlwaysIncludeEmptyFields>true</AlwaysIncludeEmptyFields>
            </itemSerializer>
            <renderingContentsResolver type="Sitecore.JavaScriptServices.GraphQL.LayoutService.GraphQLAwareRenderingContentsResolver, Sitecore.JavaScriptServices.GraphQL" resolve="true">
              <IncludeServerUrlInMediaUrls>true</IncludeServerUrlInMediaUrls>
            </renderingContentsResolver>
          </rendering>
          <serialization type="Sitecore.JavaScriptServices.ViewEngine.LayoutService.SerializationConfiguration, Sitecore.JavaScriptServices.ViewEngine">
            <transformer type="Sitecore.JavaScriptServices.ViewEngine.LayoutService.Serialization.LayoutTransformer, Sitecore.JavaScriptServices.ViewEngine" resolve="true" />
          </serialization>
        </config>
      </configurations>
    </layoutService>

    <pipelines>
      <group groupName="layoutService">
        <pipelines>
          <renderJsonRendering>
            <processor type="Uniform.Optimize.Pipelines.RenderJsonRendering.ConfigurePlaceholderRenderingService, Uniform.Optimize.Personalization.Esi.Jss"
                       patch:before="*[@type='Sitecore.LayoutService.Presentation.Pipelines.RenderJsonRendering.RenderPlaceholders, Sitecore.LayoutService']"
                       resolve="true"/>
            
            <processor type="Uniform.Optimize.Pipelines.RenderJsonRendering.ExtendContentsWithEsiData, Uniform.Optimize.Personalization.Esi.Jss"
                       patch:after="*[@type='Sitecore.LayoutService.Presentation.Pipelines.RenderJsonRendering.ResolveRenderingContents, Sitecore.LayoutService']"
                       resolve="true">
              <ruleTreeRenderer ref="uniform/personalization/esi/jssRuleTreeRenderer" />
              <allowedConfigurations hint="list">
                <config id="jss">jss</config>
              </allowedConfigurations>
            </processor>
            <processor type="Uniform.Optimize.Pipelines.RenderJsonRendering.PersonalizationSettings, Uniform.Optimize.Personalization.Esi.Jss"
                       patch:after="*[@type='Sitecore.LayoutService.Presentation.Pipelines.RenderJsonRendering.ResolveRenderingContents, Sitecore.LayoutService']"
                       resolve="true">
              <allowedConfigurations hint="list">
                <config id="jss">jss</config>
              </allowedConfigurations>
            </processor>

            <processor type="Uniform.Optimize.Pipelines.RenderJsonRendering.ResolveEsiSsrContents, Uniform.Optimize.Personalization.Esi.Jss"
                       patch:before="*[@type='Sitecore.LayoutService.Presentation.Pipelines.RenderJsonRendering.ResolveRenderingContents, Sitecore.LayoutService']"
                       resolve="true">
              <allowedConfigurations hint="list">
                <config id="uniform-esi-ssr">uniform-esi-ssr</config>
              </allowedConfigurations>
            </processor>
            <processor type="Uniform.Optimize.Pipelines.RenderJsonRendering.AddComponentNameIfEmpty, Uniform.Optimize.Personalization.Esi.Jss" resolve="true">
              <allowedConfigurations hint="list">
                <config id="uniform-esi-ssr">uniform-esi-ssr</config>
              </allowedConfigurations>
            </processor>
            <processor type="Uniform.Optimize.Pipelines.RenderJsonRendering.ExtendResultForEsi, Uniform.Optimize.Personalization.Esi.Jss" resolve="true">
              <allowedConfigurations hint="list">
                <config id="uniform-esi-ssr">uniform-esi-ssr</config>
              </allowedConfigurations>
            </processor>

            <!--
            NOTE: We patch the original `ResolveRenderingContents` processor to allow us to skip the default `ResolveRenderingContents` processor if
                  an earlier processor has already resolved some contents and set a value for the `Contents` property of the JSON rendering.
            -->
            <processor type="Uniform.Optimize.Pipelines.RenderJsonRendering.ResolveRenderingContentsPatch, Uniform.Optimize.Personalization.Esi.Jss"
                       patch:instead="*[@type='Sitecore.LayoutService.Presentation.Pipelines.RenderJsonRendering.ResolveRenderingContents, Sitecore.LayoutService']"
                       resolve="true">
              <allowedConfigurations hint="list">
                <config id="jss">jss</config>
                <config id="uniform-esi-ssr">uniform-esi-ssr</config>
              </allowedConfigurations>
            </processor>
          </renderJsonRendering>
        </pipelines>
      </group>
      <initialize>
        <processor type="Uniform.Optimize.Pipelines.Initialize.RegisterRoutes, Uniform.Optimize.Personalization.Esi.Jss"
                   patch:before="processor[@type='Sitecore.LayoutService.Mvc.Pipelines.Initialize.RegisterRoutes, Sitecore.LayoutService.Mvc']"
                   />
      </initialize>
      <mvc.getRenderer>
        <!--
        The code in this processor allows us to set the layout service configuration name at runtime.
        This allows us to use Integrated Mode for SSR rendering with different layout service configurations.
        The default layout service named configuration is `jss`, which is set at the JSS <app /> config level. While we will likely want
        the default configuration when rendering for EE or preview mode, we may want to use a different layout service 
        configuration "on-demand", i.e. during static export.
        -->
        <processor
          type="Uniform.Optimize.Pipelines.MvcGetRenderer.GetJsLayoutRendererWithEsiSupport, Uniform.Optimize.Personalization.Esi.Jss"
          patch:instead="processor[@type='Sitecore.JavaScriptServices.ViewEngine.Presentation.Pipelines.MvcGetRenderer.GetJsLayoutRenderer, Sitecore.JavaScriptServices.ViewEngine']"
          resolve="true">
          <layoutServiceConfigurationName>jss</layoutServiceConfigurationName>
          <esiLayoutServiceConfigurationName>uniform-esi-ssr</esiLayoutServiceConfigurationName>
          <requestChecker ref="uniform/personalization/esi/defaultRequestChecker" />
        </processor>
        <processor type="Uniform.Optimize.Pipelines.MvcGetRenderer.GetEsiJsonRenderer, Uniform.Optimize.Personalization.Esi.Jss" />
      </mvc.getRenderer>
    </pipelines>
  </sitecore>
</configuration>
